import numpy as np
import matplotlib.pyplot as plt

# Data points
X = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5])
Y = np.array([0.0, 0.20, 0.27, 0.30, 0.32, 0.33])

# Constructing the matrix for the system of equations
# Each row corresponds to an equation for a data point
A = np.column_stack([X**3, X**2, X, np.ones(len(X))])

# Solving the linear system
coefficients = np.linalg.lstsq(A, Y, rcond=None)[0]

# Coefficients a, b, c, d
a, b, c, d = coefficients

# Generating a range of X values for plotting the polynomial
X_plot = np.linspace(min(X), max(X), 100)
# Calculating the corresponding Y values of the polynomial
Y_plot = a * X_plot**3 + b * X_plot**2 + c * X_plot + d

# Plotting the original data points and the polynomial curve
plt.scatter(X, Y, color='red', label='Data Points')
plt.plot(X_plot, Y_plot, color='blue', label='Cubic Polynomial')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Cubic Best Fit Polynomial for All Points')
plt.legend()
plt.grid(True)
plt.show()

coefficients # Displaying the coefficients a, b, c, d


# For the second case: using first five points
X_5 = X[:5]
Y_5 = Y[:5]

# Constructing the matrix for the system of equations
A_5 = np.column_stack([X_5**3, X_5**2, X_5, np.ones(len(X_5))])

# Solving the linear system
coefficients_5 = np.linalg.lstsq(A_5, Y_5, rcond=None)[0]

# Coefficients a, b, c, d
a_5, b_5, c_5, d_5 = coefficients_5

# Calculating the corresponding Y values of the polynomial
Y_plot_5 = a_5 * X_plot**3 + b_5 * X_plot**2 + c_5 * X_plot + d_5

# Plotting the original data points (first five) and the polynomial curve
plt.scatter(X_5, Y_5, color='red', label='Data Points')
plt.plot(X_plot, Y_plot_5, color='blue', label='Cubic Polynomial')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Cubic Best Fit Polynomial for First Five Points')
plt.legend()
plt.grid(True)
plt.show()

coefficients_5 # Displaying the coefficients a, b, c, d


# For the third case: using first four points
X_4 = X[:4]
Y_4 = Y[:4]

# Constructing the matrix for the system of equations
A_4 = np.column_stack([X_4**3, X_4**2, X_4, np.ones(len(X_4))])

# Solving the linear system
coefficients_4 = np.linalg.lstsq(A_4, Y_4, rcond=None)[0]

# Coefficients a, b, c, d
a_4, b_4, c_4, d_4 = coefficients_4

# Calculating the corresponding Y values of the polynomial
Y_plot_4 = a_4 * X_plot**3 + b_4 * X_plot**2 + c_4 * X_plot + d_4

# Plotting the original data points (first four) and the polynomial curve
plt.scatter(X_4, Y_4, color='red', label='Data Points')
plt.plot(X_plot, Y_plot_4, color='blue', label='Cubic Polynomial')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Cubic Best Fit Polynomial for First Four Points')
plt.legend()
plt.grid(True)
plt.show()

coefficients_4 # Displaying the coefficients a, b, c, d
